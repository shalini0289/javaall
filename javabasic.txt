What is atomic integer?
An atomic integer is a type of variable that is designed to be accessed and modified in a thread-safe manner in a concurrent or multi-threaded programming
environment. Atomic integers are used to implement synchronization constructs such as locks, mutexes, and semaphores, and are typically used to coordinate
access to shared resources in multi-threaded applications.
Atomic integers provide a simple and efficient way to perform basic operations, such as incrementing or decrementing the value of a variable, in a 
thread-safe manner without requiring explicit synchronization mechanisms. Atomic integers ensure that these operations are performed atomically,
meaning that they are indivisible and cannot be interrupted by other threads, which prevents race conditions and ensures that the value of the variable
is always consistent across all threads.

Most modern programming languages, such as Java, C++, and Python, provide built-in support for atomic integers as part of their standard 
library or through third-party libraries.


What are Transient and Volatile in Java?
Transient
The transient keyword is used to indicate that a variable should not be serialized when
an object is written to persistent storage, such as a file or a database. When an object is 
serialized, its state is converted into a stream of bytes that can be stored or transmitted 
over a network. By marking a variable as transient, you are telling the Java runtime system 
to exclude that variable from the serialization process. When the object is later 
deserialized, the transient variable will be initialized to its default value.
